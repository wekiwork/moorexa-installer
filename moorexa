<?php

// turn off error reporting
error_reporting(0);

// get the arguments
$argv = $_SERVER['argv'];

// save to directory
$saveToDirectory = $_SERVER['PWD'] . '/';

// directory flag used
$directoryFlagUsed = false;

// check for update flag
foreach ($argv as $index => $command) :

	// look for dir
	if (strpos($command, '--dir=') !== false || strpos($command, '-dir=') !== false) :

		// get the version
		$command = explode('=', $command);

		// pass the version
		$saveToDirectory = end($command) . '/';

		// make directory if it doesn't exists
		if (!is_dir($saveToDirectory)) :

			// split string
			$directoryArray = explode('/', ltrim($saveToDirectory, '/'));

			// created dir
			$createdDir = '/';

			// create directories
			foreach ($directoryArray as $dir) :

				// append directory
				$createdDir .= $dir . '/';

				try
				{
					// create directory
					if (!is_dir($createdDir)) mkdir($createdDir);
				}
				catch(Throwable $e)
				{

				}

			endforeach;

		endif;

		// remove index
		unset($argv[$index]);

		// update 
		$directoryFlagUsed = true;

		// sort
		sort($argv);

	endif;

endforeach;

// get the working directory
define('WORKING_DIRECTORY', $saveToDirectory);

// check for init within current directory
$initFile = WORKING_DIRECTORY . 'init.php';

// message to screen
function screen_display($message, string $type = '')
{
	// reset color
	$reset = "\033[0m";

	// get type
	$color = $type == 'error' ? "\033[31m" : ($type == 'success' ? "\033[32m" : '');

	// print message
	fwrite(STDOUT,  $color . $message . $reset . "\n");
}

// read line
function readInput()
{
    if (PHP_OS == "WINNT") return trim(stream_get_line(STDIN, 1024));
    
    // not windows
    return trim(readline());
}

/** STACK OVERFLOW (https://stackoverflow.com/questions/20117447/extract-a-whole-directory-with-ziparchive) **/

//to get all the recursive paths in a array
function dirtoarray($dir, $recursive=false) {
    $array_items = array();
    if (is_dir($dir)) :
	    if ($handle = opendir($dir)) {
	        while (false !== ($file = readdir($handle))) {
	            if ($file != "." && $file != "..") {
	                if (is_dir($dir. "/" . $file)) {
	                    if($recursive) {
	                        $array_items = array_merge($array_items, dirtoarray($dir. "/" . $file, $recursive));
	                    }
	                    else 
	                    {
	                    	$array_items[] = $dir . '/' . $file;
	                    }
	                } else {
	                    $file = $dir . "/" . $file;
	                    $array_items[] = preg_replace("/\/\//si", "/", $file);
	                }
	            }
	        }
	        closedir($handle);
	    }
	endif;
    return $array_items;
}

function rcopy($src, $dst) {
    if (file_exists ( $dst ))
        rrmdir ( $dst );
    if (is_dir ( $src )) {
        mkdir ( $dst );
        $files = scandir ( $src );
        foreach ( $files as $file )
            if ($file != "." && $file != "..")
                rcopy ( "$src/$file", "$dst/$file" );

    } else if (file_exists ( $src ))
        copy ( $src, $dst );
                    rrmdir ( $src );
}       

// Function to remove folders and files 
function rrmdir($dir) {
    if (is_dir($dir)) {
        $files = scandir($dir);
        foreach ($files as $file)
            if ($file != "." && $file != "..") rrmdir("$dir/$file");
        rmdir($dir);
    }
    else if (file_exists($dir)) unlink($dir);
}

/** STACK OVERFLOW ENDS HERE **/

// @var bool $updateInstaller
$updateInstaller = false;

// version to work with
$version = 'master';

// use the modular format
$modular = false;

// check for update flag
foreach ($argv as $index => $command) :

	// look for update flag
	if (strtolower($command) == 'update') $updateInstaller = true;

	// look for debug mode
	if (strpos($command, '--debug') !== false || strpos($command, '-debug') !== false) :

		// show errors
		error_reporting(E_ALL);

		// remove index
		unset($argv[$index]);

		// sort
		sort($argv);

	endif;

	// look for version
	if (strpos($command, '--version=') !== false) :

		// get the version
		$command = explode('=', $command);

		// pass the version
		$version = end($command);

		// remove index
		unset($argv[$index]);

		// sort
		sort($argv);

	endif;

	// look for modular flag
	if (strtolower($command) === '--modular') :

		// using modular
		$modular = true;

		// remove index
		unset($argv[$index]);

		// sort
		sort($argv);

	endif;

endforeach;


// check if init file exists
if (file_exists($initFile) && $updateInstaller === false) :

	// change working directory
	chdir(WORKING_DIRECTORY);

	// require the assist file
	return (file_exists('assist') ? include_once 'assist' : null);
	
endif;

// command string 
$commands = "
Try any of this commands:\n
(1.) moorexa create 
(1.1) moorexa create --version=v1.0
(2.) moorexa update 
(3.) moorexa create <project-name>
(3.1) moorexa create <project-name> --version=v1.0
(3.2) moorexa create <project-name> --modular
(4.) moorexa create <project-name> -service
(4.1) moorexa create <project-name> -service --version=v1.0
(4.2) moorexa create <project-name> -service --modular
(5.) moorexa create <project-name> -frontend
(5.1) moorexa create <project-name> -frontend --version=v1.0
(5.2) moorexa create <project-name> -frontend --modular
(6.) moorexa prepare

Additional flag 
(1.) --dir=<directory name> or -dir=<directory name>
(2.) --debug or -debug

For more information, please visit www.moorexa.com/doc/installer";


// not within a working project
if (count($argv) == 1 || (isset($argv[1]) && strlen(trim($argv[1])) == 0)) return screen_display("
Not within a working moorexa directory\n
{$commands}
");

// try creating directory
if (!is_dir(WORKING_DIRECTORY)) pclose(popen("mkdir -p " . WORKING_DIRECTORY . ' > /dev/null &', "w"));

// check for directory
if (is_dir(WORKING_DIRECTORY)) :

	// manage request
	switch(strtolower($argv[1])) :

		// create command
		case 'create':

			// get the folder name
			$folderName = isset($argv[2]) ? $argv[2] : '';

			// check for '-'
			if (strpos($folderName, '-') !== false) :

				// push to next argv
				$argv[3] = $folderName;

				// replace name
				$folderName = '';

			endif;

			// get directory
			$directory = rtrim(WORKING_DIRECTORY . $folderName, '/') . '/';

			// stop if directory exists
			if ($folderName != '' && is_dir($directory)) return screen_display('Workspace exists. Failed to overwrite', 'error');

			// create folder if it doesn't exists
			if (!is_dir($directory)) mkdir($directory);

			// get the create type
			$createType = isset($argv[3]) ? strtolower($argv[3]) : 'frontend';

			// remove dash
			$createType = ltrim($createType, '-');

			// open storage
			$storage = __DIR__ . '/storage/' . ($createType == 'service' ? $version . '-moorexaMicroService' : $version . '-moorexaFrontEnd') . '.zip';

			// does file exists
			if (!file_exists($storage)) return implode("\n", [
				screen_display('Invalid create type "'.$createType.'"', 'error'),
				screen_display($commands)
			]);

			// file exists
			// open zip manager
			screen_display('Creating a blank project for "'.$createType.'"', 'success');

			// get size
			$fileSize = filesize($storage);

			// print size to screen
			screen_display('Pouring size ' . round($fileSize / 1024) . 'kb into '.$directory.'');

			// load zip archive
			$zipArchive = new ZipArchive();

			// open file
			if (!$zipArchive->open($storage)) return screen_display('Could not start extracting. It\'s possible that the .zip file has been corrupted or we dont have full permission to continue. Please run moorexa update or contact support.', 'error');

			// starting extraction
			screen_display('Starting extraction from cache', 'success');

			// sleep
			sleep(2);

			// make a tmp direcory
			if (!is_dir(__DIR__ . '/tmp/')) mkdir(__DIR__ . '/tmp/');

			// start now
			if ($zipArchive->extractTo(__DIR__ . '/tmp/')) $zipArchive->close();

			// get the folder extracted
			$folderExtracted = dirtoarray(__DIR__ . '/tmp/')[0];

			// copy files
			rcopy($folderExtracted, $directory);

			// delete tmp
			rrmdir($folderExtracted);

			// get the installer directory
			$installerDirectory = file_get_contents(__DIR__ . '/installer_directory');

			// is modular ?
			if ($modular && $folderName != '') :
				// go back one step
				$installerDirectory = '../' . $installerDirectory;
			endif;

			// folders we would be creating in the installer directory
			$installerFolders = [
				__DIR__ . '/storage/' . $version . '-moorexaCore.zip', 
				__DIR__ . '/storage/' . $version . '-moorexaSource.zip', 
				__DIR__ . '/storage/' . $version . '-moorexaPackager.zip', 
			];
			

			chdir($directory);

			// create installer directory and also add core, source, and packager
			if (!is_dir($installerDirectory)) mkdir($installerDirectory);

			// create folders
			foreach ($installerFolders as $zipFile) :

				// extract zip file into folder
				$zip = new ZipArchive();

				if ($zip->open($zipFile)) :

					// extract now
					$zip->extractTo($installerDirectory);

				endif;

				// close file
				$zip->close();

			endforeach;


			// rename folders
			$folders = dirtoarray($installerDirectory);

			// loop through
			foreach ($folders as $folder) :

				// rename folders
				if (strpos($folder, 'core')) rename($folder, $installerDirectory . '/core');
				if (strpos($folder, 'source')) rename($folder, $installerDirectory . '/source');
				if (strpos($folder, 'packagers')) rename($folder, $installerDirectory . '/packagers');

			endforeach;

			// add the version
			file_put_contents($installerDirectory . '/version', $version);

			// add global config to working directory
			$globalConfig = file_get_contents(__DIR__ . '/.global.config.' . $createType . '.txt');

			// update {directory}
			$globalConfig = str_replace('{directory}', $installerDirectory, $globalConfig);

			// add to directory
			file_put_contents($directory . '/.global.config', $globalConfig);

			// all good
			screen_display('Your project has been created successfully in '.WORKING_DIRECTORY.'.', 'success');

			// change directory
			$changeDirectory = $directory == WORKING_DIRECTORY ? 'run ' : 'cd into "'.$directory.'", and run ';

			// final note
			screen_display("\n".'So what next?'."\n". $changeDirectory .' "moorexa install" to load required dependencies, or "moorexa serve" to start development server if dependencies already exists.'."\n\n".'Thank you for building with Moorexa..');

		break;

		// prepare
		case 'prepare':

			// check for folder installation
			if (!is_dir(__DIR__ . '/storage')) mkdir(__DIR__ . '/storage');
			
			// try to download from svn.

		break;

		// update 
		case 'update':

			// ask user 
			fwrite(STDOUT, PHP_EOL . 'What version of moorexa should we update? (Hit Enter to update your current version) : ');

			// read input
			$input = readInput();

			// @var string $version
			$version = 'master';

			// has global file
			$globalConfigFile = WORKING_DIRECTORY . '/.global.config';


			// get the installer_directory
			$installer_directory = file_get_contents('https://raw.githubusercontent.com/wekiwork/moorexa-installer/master/installer_directory');

			// can continue
			$canContinue = false;

			// curren dir
			$currentDirectory = __DIR__;

			// load config
			if (file_exists($globalConfigFile)) :

				// include file here
				include_once $globalConfigFile;

				// set the working directory
				chdir(WORKING_DIRECTORY);

				// get current version
				if (defined('MOOREXA_INSTALLER_DIR')) :

					// check for version file
					if (file_exists(MOOREXA_INSTALLER_DIR . '/version')) $version = file_get_contents(trim(MOOREXA_INSTALLER_DIR . '/version'));

					$canContinue = true;

				endif;
					

			else:

				// do we have such directory ?
				if (is_dir(WORKING_DIRECTORY . '/' . $installer_directory)) :

					// check for version file
					if (file_exists(WORKING_DIRECTORY . '/' . $installer_directory . '/version')) $version = file_get_contents(trim(WORKING_DIRECTORY . '/' . $installer_directory . '/version'));

					$canContinue = true;

				endif;

			endif;

			// get the version
			$version = $input == '' ? $version : $input;

			chdir($currentDirectory);

			// command 
			$command = 'php -r "copy(\'https://raw.githubusercontent.com/wekiwork/moorexa-installer/master/installer.php\', \'installer.php\');"; php installer.php --update --version='.$version.';';

			// run command
			pclose(popen($command, "w"));

			// clean version
			$versionName = preg_replace('/[\s]+/', '', $version);

			// files to extract
			$filesToExtract = [
				__DIR__ . '/storage/' . $versionName . '-moorexaCore.zip',
				__DIR__ . '/storage/' . $versionName . '-moorexaSource.zip',
				__DIR__ . '/storage/' . $versionName . '-moorexaPackager.zip',
			];

			// create tmp folder
			$tmpFolder = __DIR__ . '/tmp/';

			// create folder if it doesn't exists
			if (!is_dir($tmpFolder)) mkdir($tmpFolder);

			// update framework directory
			if ($canContinue) :

				// updated
				$updated = 0;


				if (file_exists($globalConfigFile)) :

					// load zip archive
					$zipArchive = new ZipArchive();

					// run update
					foreach ($filesToExtract as $zipFile) :

						// open file
						if ($zipArchive->open($zipFile)) :

							// extract files
							if ($zipArchive->extractTo($tmpFolder)) :

								$updated++;

							endif;

						endif;

					endforeach;

					// close zip handler
					$zipArchive->close();

					// set the working directory
					chdir(WORKING_DIRECTORY);


					// get MOOREXA_INSTALLER_DIR
					if (defined('MOOREXA_INSTALLER_DIR')) :

						// update user
						screen_display('Updating framework library.');

						// take a break
						sleep(1);

						// get all folders
						$folders = dirtoarray($tmpFolder);

						// copy all
						foreach ($folders as $folder) :

							if (strpos($folder, 'core')) :
								// copy all out
								rcopy($folder, MOOREXA_INSTALLER_DIR . '/core');
							endif;

							if (strpos($folder, 'source')) :
								// copy all out
								rcopy($folder, MOOREXA_INSTALLER_DIR . '/source');
							endif;

							if (strpos($folder, 'packagers')) :
								// copy all out
								rcopy($folder, MOOREXA_INSTALLER_DIR . '/packagers');
							endif;

							// delete folder
							rrmdir($folder);

						endforeach;

						// are we good ?
						if ($updated == count($filesToExtract)) :

							screen_display('Update successful');

							// update version on file
							file_put_contents(MOOREXA_INSTALLER_DIR . '/version', $version);

						else:

							screen_display('Update was not successful', 'error');

						endif;

					endif;

				endif;

			else:

				// all good
				screen_display(($version == 'master' ? 'Master branch was updated successfully' : 'Your version ' . $version . ' was updated successfully'));

			endif;

		break;

		// invalid command 
		default:
			screen_display('Invalid command "'.$argv[1].'"', 'error');
			screen_display($commands);
	endswitch;

else:

	// working directory doesn't exists
	screen_display('Could not continue, working directory "'.WORKING_DIRECTORY.'" does not exists.', 'error');

endif;
